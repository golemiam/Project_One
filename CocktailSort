package p01;

public class CocktailSort {
    private int comparisonTracker; // Tracks total number of comparisons made

    public CocktailSort() {
        this.comparisonTracker = 0;
    }

    // Returns the number of comparisons made
    public int getComparisons() {
        return comparisonTracker;
    }

    // Cocktail Sort implementation
    public void sort(int a[]) {
        boolean swapped = true;
        int start = 0;
        int end = a.length;

        while (swapped) {
            swapped = false;

            // Loop from bottom to top
            for (int i = start; i < end - 1; ++i) {
                if (a[i] > a[i + 1]) {
                    int temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                    swapped = true;
                }
                comparisonTracker++; // Count the comparison
            }

            // If no elements were swapped, the array is sorted
            if (!swapped)
                break;

            swapped = false;
            end--;

            // Loop from top to bottom
            for (int i = end - 1; i >= start; i--) {
                if (a[i] > a[i + 1]) {
                    int temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                    swapped = true;
                }
                comparisonTracker++; // Count the comparison
            }

            start++;
        }
    }
}
